#!/usr/bin/env nextflow

process {
    /*
    * Global process settings
    */

    // Default do not publish files
    publishDir = [
        enabled: false
    ]
    // By default processes ran with schelper 0.2.4
    withName: R {
        container = 'alexthiery/10x-npb-schelper:base-0.2.4'
    }

    withName: ".*:GENE_MODULES" {
        cpus = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }

    withName: ".*:SEURAT_H5AD" {
        ext.args = "--assay integrated --outfile seurat --group_by scHelper_cell_type"
    }

    withName: "GENE_MODULES_SUBSET_LATENT_TIME" {
        publishDir  = [
            path: { "${params.outdir}/transfer_labels/gene_modules_subset_latent_time" },
            mode: 'copy'
        ]
    }
    withName: "GENE_MODULES_NPB_LATENT_TIME" {
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/transfer_ppr_nc_subset/gene_modules_npb_latent_time" },
            mode: 'copy'
        ]
    }
    withName: "COEXPRESSION_ANALYSIS_NPB" {
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/transfer_ppr_nc_subset/coexpression_analysis" },
            mode: 'copy'
        ]
    }
    withName: "COEXPRESSION_NC_PPR_MODULES_NPB" {
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/transfer_ppr_nc_subset/coexpression_nc_ppr_modules_npb" },
            mode: 'copy'
        ]
    }


    /*
    * Sub-workflow specific settings
    */

    // SEURAT_FILTERING subworkflow
    withName: 'SEURAT_FILTERING:.*' {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
        publishDir  = [
            path: { "${params.outdir}/${task.process.tokenize(":")[-2..-1].join("/").toLowerCase()}" },
            mode: 'copy'
        ]
    }


    // SEURAT_FILTERED_PROCESS subworkflow
    withName: "SEURAT_FILTERED_PROCESS:GENE_MODULES" {
        ext.args = "--meta_col scHelper_cell_type"
        publishDir  = [
            path: { "${params.outdir}/filtered_seurat/antler/gene_modules" },
            mode: 'copy'
        ]
    }

    withName: "SEURAT_FILTERED_PROCESS:STATE_CLASSIFICATION" {
        publishDir  = [
            path: { "${params.outdir}/filtered_seurat/seurat/state_classification" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_FILTERED_PROCESS:GENE_MODULES" {
        ext.args = "--meta_col scHelper_cell_type"
        publishDir  = [
            path: { "${params.outdir}/filtered_seurat/seurat/gene_modules" },
            mode: 'copy'
        ]
    }

    withName: "SEURAT_FILTERED_PROCESS:SEURAT_SCVELO:SEURAT_INTERSECT_LOOM" {
        publishDir  = [
            path: { "${params.outdir}/filtered_seurat/scvelo/seurat_intersect_loom" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_FILTERED_PROCESS:SEURAT_SCVELO:SCVELO_RUN" {
        ext.args = "-m dynamical -c scHelper_cell_type -s stage -b run --coloursColumn cell_colours --npcs 20 --nneighbours 20 --rootEarliest HH4 HH5 HH6 HH7 ss4 ss8 --rootCol stage --weightDiffusion 0.2 --diffKinetics True --dpi 720"
        publishDir  = [
            path: { "${params.outdir}/filtered_seurat/scvelo/scvelo_run" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_FILTERED_PROCESS:CELLRANK_RUN" {
        ext.args = "-c scHelper_cell_type -ck True -kp 0.2 -sm 4 --dataType full --dpi 1040"
        publishDir  = [
            path: { "${params.outdir}/filtered_seurat/cellrank" },
            mode: 'copy'
        ]
    }


    // STAGE_SPLIT subworkflow
    withName: "SEURAT_STAGE_PROCESS:SPLIT" {
        ext.args = "--split stage"
    }
    withName: "SEURAT_STAGE_PROCESS:CLUSTER" {
        ext.args = "--clustres 1.2"
        publishDir  = [
            path: { "${params.outdir}/stage_split/${meta.sample_id}/seurat/stage_cluster" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_STAGE_PROCESS:GENE_MODULES" {
        ext.args = "--meta_col scHelper_cell_type"
        publishDir  = [
            path: { "${params.outdir}/stage_split/${meta.sample_id}/antler/stage_gene_modules" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_STAGE_PROCESS:STATE_CLASSIFICATION" {
        publishDir  = [
            path: { "${params.outdir}/stage_split/${meta.sample_id}/seurat/stage_state_classification" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_STAGE_PROCESS:SEURAT_SCVELO:SEURAT_INTERSECT_LOOM" {
        publishDir  = [
            path: { "${params.outdir}/stage_split/${meta.sample_id}/scvelo/seurat_intersect_loom" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_STAGE_PROCESS:SEURAT_SCVELO:SCVELO_RUN" {
        ext.args = "-m dynamical -c scHelper_cell_type -s stage -b run --coloursColumn cell_colours --npcs 20 --nneighbours 20 --weightDiffusion 0.2 --diffKinetics True --linewidth 4 --linedensity 1 --arrowsize 3 --dpi 720"
        publishDir  = [
            path: { "${params.outdir}/stage_split/${meta.sample_id}/scvelo/scvelo_run" },
            mode: 'copy'
        ]
    }


    withName: "TRANSFER_LABELS" {
        publishDir  = [
            path: { "${params.outdir}/transfer_labels/seurat" },
            mode: 'copy'
        ]
    }
    // SEURAT_TRANSFER_FULL_PROCESS subworkflow
    withName: "SEURAT_TRANSFER_FULL_PROCESS:PLOT_DOTPLOTS" {
        publishDir  = [
            path: { "${params.outdir}/transfer_labels/dotplots" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_FULL_PROCESS:GENE_MODULES" {
        ext.args = "--meta_col scHelper_cell_type"
        publishDir  = [
            path: { "${params.outdir}/transfer_labels/antler/gene_modules" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_FULL_PROCESS:SEURAT_SCVELO:SEURAT_INTERSECT_LOOM" {
        publishDir  = [
            path: { "${params.outdir}/transfer_labels/scvelo/seurat_intersect_loom" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_FULL_PROCESS:SEURAT_SCVELO:SCVELO_RUN" {
        ext.args = "-m dynamical -c scHelper_cell_type -s stage -b run --coloursColumn cell_colours --npcs 20 --nneighbours 20 --rootEarliest HH4 HH5 HH6 HH7 ss4 ss8 --rootCol stage  --weightDiffusion 0.2 --diffKinetics True --dpi 720"
        publishDir  = [
            path: { "${params.outdir}/transfer_labels/scvelo/scvelo_runs" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_FULL_PROCESS:CELLRANK_RUN" {
        ext.args = "-c scHelper_cell_type -ck True -kp 0.2 -sm 4 --dataType labelTransfer --dpi 1040"
        publishDir  = [
            path: { "${params.outdir}/transfer_labels/cellrank" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_FULL_PROCESS:GENE_MODULES" {
        ext.args = "--meta_col scHelper_cell_type"
        publishDir  = [
            path: { "${params.outdir}/transfer_labels/antler/gene_modules" },
            mode: 'copy'
        ]
    }

    // SEURAT_TRANSFER_PPR_NC_PROCESS subworkflow

    withName: "SEURAT_TRANSFER_PPR_NC_PROCESS:SUBSET" {
        ext.args = "--groups1 PPR,aPPR,pPPR,NPB,pNPB,aNPB,NC,dNC --meta_col1 scHelper_cell_type --groups2 HH5,HH6,HH7,ss4,ss8 --meta_col2 stage --verbose TRUE --output transfer_ppr_nc_subset"
        publishDir  = [
            path: { "${params.outdir}/transfer_clusters_subset/npb_subset/seurat/clusters_subsets" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_PPR_NC_PROCESS:CLUSTER" {
        ext.args = "--verbose TRUE --meta_col scHelper_cell_type"
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/${meta.sample_id}/seurat/transfer_cluster" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_PPR_NC_PROCESS:GENE_MODULES" {
        ext.args = "--meta_col scHelper_cell_type"
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/${meta.sample_id}/antler/transfer_gene_modules" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_PPR_NC_PROCESS:SEURAT_SCVELO:SEURAT_INTERSECT_LOOM" {
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/${meta.sample_id}/scvelo/seurat_intersect_loom" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_PPR_NC_PROCESS:SEURAT_SCVELO:SCVELO_RUN" {
        ext.args = "-m dynamical -c scHelper_cell_type -s stage -b run --coloursColumn cell_colours --npcs 20 --nneighbours 20 --weightDiffusion 0.2 --diffKinetics True --rootEarliest HH4 HH5 HH6 HH7 ss4 ss8 --rootCol stage --endLatest HH4 HH5 HH6 HH7 ss4 ss8 --endCol stage --linewidth 5 --linedensity 1 --arrowsize 4 --dpi 720"
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/${meta.sample_id}/scvelo/seurat_intersect_loom" },
            mode: 'copy'
        ]
    }
    withName: "SEURAT_TRANSFER_PPR_NC_PROCESS:CELLRANK_RUN" {
        ext.args = "-c scHelper_cell_type -ck True -kp 0.2 -sm 4 --dataType ppr_nc --dpi 1040"
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/${meta.sample_id}/cellrank" },
            mode: 'copy'
        ]
    }

    withName: "HCR:HCR_INTENSITY_PLOT" {
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/hcr/${meta.sample_id}" },
            mode: 'copy'
        ]
    }
    withName: "HCR:SPATIAL_EXPRESSION_MODELLING" {
        publishDir  = [
            path: { "${params.outdir}/transfer_subset/hcr/spatial_expression_modelling" },
            mode: 'copy'
        ]
    }

    withName: "IDENTIFY_LINEAGE_DRIVERS_FULL" {
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }

        publishDir  = [
            path: { "${params.outdir}/transfer_labels/identify_lineage_drivers" },
            mode: 'copy'
        ]
    }
    withName: "IDENTIFY_LINEAGE_DRIVERS_NPB" {
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 120.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }

        publishDir  = [
            path: { "${params.outdir}/transfer_subset/transfer_ppr_nc_subset/identify_lineage_drivers" },
            mode: 'copy'
        ]
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}
